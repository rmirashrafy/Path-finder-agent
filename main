#include <SFML/Graphics.hpp>
#include <iostream>
#include <vector>
#include "Playground.h"

using namespace std;

/* in this int array :
    goal is set to 100
    start is set to 0
    every tunnel is 3
    unvisited sq is -1
    visited sq is 1
    vectors are a digit number where first digit is Direction(clockwise and in 8 directions) and 
    the second and so on are the amount of steps 
*/

// get color based on value
sf::Color getColor(int value) {
    switch (value) {
        case 0: return sf::Color::White;          // Start position
        case 1: return sf::Color::Green;          // Visited square
        case 3: return sf::Color::Yellow;         // Tunnel
        case 100: return sf::Color::Blue;         // Goal
        case -1: return sf::Color(205, 193, 180); // Unvisited square
        default: return sf::Color(238, 228, 218); // Other
    }
}

int main() {
    // Play ground sq size TODO: what if the input is less than 6?
    int LenghtOfPlayGround;
    cin >> LenghtOfPlayGround;

    if (LenghtOfPlayGround <= 6) {
        cout << "Invalid size, The size must be more than 6." << endl;
        return 1;
    }

    Playground playground(LenghtOfPlayGround);
    const auto& grid = playground.getPlayground();
    int GoalPositionX = playground.getGoalPositionX();
    int GoalPositionY = playground.getGoalPositionY();

    // Size of window and squares
    int squareSize = 90; //TODO : the sq size must create a fitting window in screen
    int windowSize = LenghtOfPlayGround * squareSize;

    // Main window
    sf::RenderWindow window(sf::VideoMode(windowSize, windowSize), "Playground Grid");

    // font
    sf::Font font;
    if (!font.loadFromFile("arial.ttf")) {
        std::cerr << "Error loading font\n";
        return -1;
    }

    // Main window processing
    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        window.clear(sf::Color::White);

        // Grid drawing
        for (int i = 0; i < LenghtOfPlayGround; ++i) {
            for (int j = 0; j < LenghtOfPlayGround; ++j) {
                sf::RectangleShape square(sf::Vector2f(squareSize - 5, squareSize - 5));
                square.setPosition(j * squareSize, i * squareSize);
                square.setFillColor(getColor(grid[i][j]));
                square.setOutlineThickness(2);
                square.setOutlineColor(sf::Color::Black);
                window.draw(square);

                // Add text if there is a vector
                if (grid[i][j] != -1 && grid[i][j] != 0 && grid[i][j] != 3 && grid[i][j] != 100) {
                    sf::Text text;
                    text.setFont(font);
                    text.setString(to_string(grid[i][j]));
                    text.setCharacterSize(24);
                    text.setFillColor(sf::Color::Black);
                    sf::FloatRect textRect = text.getLocalBounds();
                    text.setOrigin(textRect.left + textRect.width / 2.0f, textRect.top + textRect.height / 2.0f);
                    text.setPosition(j * squareSize + squareSize / 2, i * squareSize + squareSize / 2);
                    window.draw(text);
                }
            }
        }

        window.display();
    }

    return 0;
}
